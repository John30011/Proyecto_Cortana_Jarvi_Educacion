[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = -v --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning
    ignore::FutureWarning

log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configuración específica para las pruebas
asyncio_mode = auto

# Opciones de cobertura
[pytest-cov]

[coverage:run]
source = app
branch = True
omit =
    */tests/*
    */__pycache__/*
    */venv/*
    */.venv/*
    */migrations/*
    */alembic/*

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

    # Ignore type checking and mypy
    if TYPE_CHECKING:
    @overload
    @typing\.overload
    # Ignore async/await in Python 3.5+
    async def
    async with
    async for
    await

    # Ignore type comments
    # type: ignore
    # fmt: off
    # fmt: on

    # Ignore empty functions
    (\s*|\s*#.*)pass\s*$
